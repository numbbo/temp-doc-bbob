---
title: "f<sub>5</sub>: Linear Slope"
format:
  html:
    include-after-body: 
      - text: <script type="text/javascript" defer src="/assets/js/helpers.js"></script>
      - text: <script type="text/javascript" defer src="/assets/js/viz-bbob-grid-plots.js"></script>
---
<div id="text-f5">

$$f_{5}(\mathbf{x}) = \sum_{i = 1}^{D} 5\,|s_i| - s_i z_i  
   + f_\mathrm{opt}$$

-   $z_i = x_i$ if $x_i^\mathrm{opt}x_i < 5^2$ and
    $z_i = x_i^\mathrm{opt}$ otherwise, for
    $i=1,\dots,D$. That is, if $x_i$ exceeds
    $x_i^\mathrm{opt}$ it will mapped back into the domain
    and the function appears to be constant in this direction.

-   $s_i = \mathrm{{sign}}\left(x_i^\mathrm{opt}\right)\, 10^{\frac{i-1}{D-1}}$
    for $i=1,\dots,D$.

-   $\mathbf{x^\mathrm{opt}}= \mathbf{z^\mathrm{opt}}= 5\times\mathbf{1_-^+}$

<details>
<summary>**Symbols and definitions:**</summary>

{{< include ../symbols.md >}}

</details>

**Properties:**

Purely linear function testing whether the search can go outside the
initial convex hull of solutions right into the domain boundary.

-   $\mathbf{x}^\mathrm{opt}$ is on the domain boundary

**Information gained from this function:**

-   Can the search go outside the initial convex hull of solutions into
    the domain boundary? Can the step size be increased accordingly?
</div>


## Selected Problem Visualizations 

Click on a plot to see the same visualization for other problem instances.

<div id="plot-grid" class="plot-grid" data-num="5" ></div>

## Python Usage Examples

To limit benchmarking experiments only to the first ten instances of this problem from 2009 in dimensions 
2 and 20, instantiate the `Suite` as follows:

```{python}
import cocoex

suite = cocoex.Suite(
  suite_name="bbob", 
  suite_instance="year: 2009", 
  suite_options="function_indices: 5 instance_indices: 1-10 dimensions: 2,20"
)
problem = suite[0]
print(problem.info)  
```

Sometimes it can be useful to access a `bbob` problem without using it in a benchmarking experiment. For such needs, the problem can be instantiated for any instance number and dimension using the `BareProblem`
interface. Note that the bare problem *cannot be observed/logged*. 

```{python}
import cocoex

problem = cocoex.BareProblem(
  suite_name="bbob", 
  function=5, 
  dimension=14, 
  instance=42
)
problem(14 * [0])
```

## C Implementation

You can find the C implementation of the problem [here](https://github.com/numbbo/coco-experiment/blob/main/src/f_linear_slope.c).
