---
title: "f<sub>16</sub>: Weierstrass"
format:
  html:
    include-after-body: 
      - text: <script type="text/javascript" defer src="/assets/js/helpers.js"></script>
      - text: <script type="text/javascript" defer src="/assets/js/viz-bbob-grid-plots.js"></script>
---
<div id="text-f16">

$$f_{16}(\mathbf{x}) = 10 \left( \frac{1}{D} 
   \sum_{i = 1}^{D}\sum_{k = 0}^{11} 1/2^k \cos(2\pi3^k(z_i + 1/2))
            - f_0 \right)^3 + \frac{10}{D}f_{\mathrm{pen}}(\mathbf{x}) + f_\mathrm{opt}$$

-   $\mathbf{z}= \mathbf{R}\Lambda^{\!1/100}\mathbf{Q}\,T_\mathrm{\hspace*{-0.01emosz}}(\mathbf{R}(\mathbf{x}-\mathbf{x^\mathrm{opt}}))$

-   $f_0 = \sum_{k = 0}^{11} 1/2^k \cos(2\pi3^k 1/2)$

<details>
<summary>**Symbols and definitions:**</summary>

{{< include ../symbols.md >}}

</details>

**Properties:**

Highly rugged and moderately repetitive landscape, where the global
optimum is not unique.

-   the term $\sum_k 1/2^k \cos(2\pi3^k\dots)$ introduces the
    ruggedness, where lower frequencies have a larger weight $1/2^k$.

-   rotated, locally irregular, non-unique global optimum

**Information gained from this function:**

-   in comparison to f<sub>17</sub>: Does ruggedness or a repetitive landscape
    deter the search behavior?
</div>


## Selected Problem Visualizations 

Click on a plot to see the same visualization for other problem instances.

<div id="plot-grid" class="plot-grid" data-num="16" ></div>

## Python Usage Examples

To limit benchmarking experiments only to the first ten instances of this problem from 2009 in dimensions 
2 and 20, instantiate the `Suite` as follows:

```{python}
import cocoex

suite = cocoex.Suite(
  suite_name="bbob", 
  suite_instance="year: 2009", 
  suite_options="function_indices: 16 instance_indices: 1-10 dimensions: 2,20"
)
problem = suite[0]
print(problem.info)  
```

Sometimes it can be useful to access a `bbob` problem without using it in a benchmarking experiment. For such needs, the problem can be instantiated for any instance number and dimension using the `BareProblem`
interface. Note that the bare problem *cannot be observed/logged*. 

```{python}
import cocoex

problem = cocoex.BareProblem(
  suite_name="bbob", 
  function=16, 
  dimension=14, 
  instance=42
)
problem(14 * [0])
```

## C Implementation

You can find the C implementation of the problem [here](https://github.com/numbbo/coco-experiment/blob/main/src/f_weierstrass.c).
