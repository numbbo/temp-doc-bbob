---
title: "f<sub>4</sub>: Skew Rastrigin-Bueche"
format:
  html:
    include-after-body: 
      - text: <script type="text/javascript" defer src="/assets/js/helpers.js"></script>
      - text: <script type="text/javascript" defer src="/assets/js/viz-bbob-grid-plots.js"></script>
---
<div id="text-f4">

$$f_{4}(\mathbf{x}) = 10 \left(D- \sum_{i = 1}^{D}\cos(2\pi z_i)\right) + 
             \sum_{i = 1}^{D}z_i^2 + 100\,f_{\mathrm{pen}}(\mathbf{x}) + f_\mathrm{opt}$$

-   $z_i = s_i\,T_\mathrm{\hspace*{-0.01emosz}}(x_i - x_i^\mathrm{opt}) \quad \text{for} \; i = 1 
            \ldots D$

-   $s_i = \begin{cases}
    	      10\times10^{\frac{1}{2}\,\frac{i-1}{D-1}} & 
           \text{~if~} z_i>0 \text{~and~} i = 1,3,5,\ldots 
             \\ 
             10^{\frac{1}{2}\frac{i-1}{D-1}} & \text{~otherwise~}
      \end{cases}$ for $i= 1,\dots,D$

<details>
<summary>**Symbols and definitions:**</summary>

{{< include ../symbols.md >}}

</details>

**Properties:**

Highly multimodal function with a structured but highly asymmetric
placement of the optima. Constructed as a deceptive function for
symmetrically distributed search operators.

-   roughly $10^D$ local optima, conditioning is about
    $10$, skew factor is about $10$ in $x$-space and $100$ in $f$-space

**Information gained from this function:**

-   In comparison to f<sub>3</sub>: What is the effect of asymmetry?
</div>


## Selected Problem Visualizations 

Click on a plot to see the same visualization for other problem instances.

<div id="plot-grid" class="plot-grid" data-num="4" ></div>

## Python Usage Examples

To limit benchmarking experiments only to the first ten instances of this problem from 2009 in dimensions 
2 and 20, instantiate the `Suite` as follows:

```{python}
import cocoex

suite = cocoex.Suite(
  suite_name="bbob", 
  suite_instance="year: 2009", 
  suite_options="function_indices: 4 instance_indices: 1-10 dimensions: 2,20"
)
problem = suite[0]
print(problem.info)  
```

Sometimes it can be useful to access a `bbob` problem without using it in a benchmarking experiment. For such needs, the problem can be instantiated for any instance number and dimension using the `BareProblem`
interface. Note that the bare problem *cannot be observed/logged*. 

```{python}
import cocoex

problem = cocoex.BareProblem(
  suite_name="bbob", 
  function=4, 
  dimension=14, 
  instance=42
)
problem(14 * [0])
```

## C Implementation

You can find the C implementation of the problem [here](https://github.com/numbbo/coco-experiment/blob/main/src/f_bueche_rastrigin.c).
