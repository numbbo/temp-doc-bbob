---
title: "f<sub>20</sub>: Schwefel x*sin(x)"
format:
  html:
    include-after-body: 
      - text: <script type="text/javascript" defer src="/assets/js/helpers.js"></script>
      - text: <script type="text/javascript" defer src="/assets/js/viz-bbob-grid-plots.js"></script>
---
<div id="text-f20">

$$f_{20}(\mathbf{x}) = - \frac{1}{100D}%  % kept in the final print
\sum_{i = 1}^{D}z_i\sin(\sqrt{|z_i|}) + 4.189828872724339 
     + 100f_{\mathrm{pen}}(\mathbf{z}/100) + f_\mathrm{opt}$$

-   $\hat{\mathbf{x}} = 2\times\mathbf{1_-^+}\otimes\mathbf{x}$

-   $\hat{z}_{1} = \hat{x}_{1}$,$\quad \hat{z}_{i+1} = \hat{x}_{i+1} + 0.25 \left({\hat{x}_{i}} - 2|x_i^{\text{opt}}| \right)$,$\quad \text{for } i = 1, \ldots, D - 1$

-   $\mathbf{z}= 100 (\Lambda^{10} (\hat{\mathbf{z}} - 2\left|\mathbf{x^\mathrm{opt}}\right|)$ + $2\left|\mathbf{x^\mathrm{opt}}\right|)$

-   $\mathbf{x^\mathrm{opt}}= 4.2096874633/2 \;\mathbf{1_-^+}$,
    where $\mathbf{1}_-^+$ is the same realization as above

<details>
<summary>**Symbols and definitions:**</summary>

{{< include ../symbols.md >}}

</details>

**Properties:**

The most prominent $2^D$ minima are located comparatively
close to the corners of the unpenalized search area [@schwefel1981numerical].

-   the penalization is essential, as otherwise more and better minima
    occur further away from the search space origin
</div>
## Selected Problem Visualizations 

Click on a plot to see the same visualization for other problem instances.

<div id="plot-grid" class="plot-grid" data-num="20" ></div>

## Python Usage Examples

To limit benchmarking experiments only to the first ten instances of this problem from 2009 in dimensions 
2 and 20, instantiate the `Suite` as follows:

```{python}
import cocoex

suite = cocoex.Suite(
  suite_name="bbob", 
  suite_instance="year: 2009", 
  suite_options="function_indices: 20 instance_indices: 1-10 dimensions: 2,20"
)
problem = suite[0]
print(problem.info)  
```

Sometimes it can be useful to access a `bbob` problem without using it in a benchmarking experiment. For such needs, the problem can be instantiated for any instance number and dimension using the `BareProblem`
interface. Note that the bare problem *cannot be observed/logged*. 

```{python}
import cocoex

problem = cocoex.BareProblem(
  suite_name="bbob", 
  function=20, 
  dimension=14, 
  instance=42
)
problem(14 * [0])
```

## C Implementation

You can find the C implementation of the problem [here](https://github.com/numbbo/coco-experiment/blob/main/src/f_schwefel.c).
