---
title: " f<sub>13</sub>: Sharp Ridge"
format:
  html:
    include-after-body: 
      - text: <script type="text/javascript" defer src="/assets/js/helpers.js"></script>
      - text: <script type="text/javascript" defer src="/assets/js/viz-bbob-grid-plots.js"></script>
---
<div id="text-f13">

$$f_{13}(\mathbf{x}) = z_1^2 + 100\,\sqrt{\sum_{i = 2}^{D} z_i^2} + f_\mathrm{opt}$$

-   $\mathbf{z}= \mathbf{Q}\Lambda^{\!10}\mathbf{R}(\mathbf{x}- \mathbf{x^\mathrm{opt}})$

<details>
<summary>**Symbols and definitions:**</summary>

{{< include ../symbols.md >}}

</details>

**Properties:**

As for the Bent Cigar function, a ridge defined as
$\sum_{i=2}^D z_i^2 = 0$ must be followed. The ridge is
non-differentiable and the gradient is constant when the ridge is
approached from any given point. Following the gradient becomes
ineffective close to the ridge where the ridge needs to be followed in
$z_1$-direction to its optimum. The necessary change in "search
behavior" close to the ridge is difficult to diagnose, because the
gradient towards the ridge does not flatten out.\
**Information gained from this function:**

-   In comparison to f<sub>12</sub>: What is the effect of non-smoothness,
    non-differentiabale ridge?
</div>


## Selected Problem Visualizations 

Click on a plot to see the same visualization for other problem instances.

<div id="plot-grid" class="plot-grid" data-num="13" ></div>

## Python Usage Examples

To limit benchmarking experiments only to the first ten instances of this problem from 2009 in dimensions 
2 and 20, instantiate the `Suite` as follows:

```{python}
import cocoex

suite = cocoex.Suite(
  suite_name="bbob", 
  suite_instance="year: 2009", 
  suite_options="function_indices: 13 instance_indices: 1-10 dimensions: 2,20"
)
problem = suite[0]
print(problem.info)  
```

Sometimes it can be useful to access a `bbob` problem without using it in a benchmarking experiment. For such needs, the problem can be instantiated for any instance number and dimension using the `BareProblem`
interface. Note that the bare problem *cannot be observed/logged*. 

```python
import cocoex

problem = cocoex.BareProblem(
  suite_name="bbob", 
  function=13, 
  dimension=14, 
  instance=42
)
problem(14 * [0])
```

## C Implementation

You can find the C implementation of the problem [here](https://github.com/numbbo/coco-experiment/blob/main/src/f_sharp_ridge.c).
